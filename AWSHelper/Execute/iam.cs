using System;
using AsmodatStandard.Extensions;
using System.Linq;
using AsmodatStandard.IO;
using AWSWrapper.IAM;
using AsmodatStandard.Extensions.Collections;
using Amazon.SecurityToken.Model;

namespace AWSHelper
{
    public partial class Program
    {
        private static void executeIAM(string[] args, Credentials credentials)
        {
            var nArgs = CLIHelper.GetNamedArguments(args);
            var helper = new IAMHelper(credentials);

            switch (args[1])
            {
                case "create-policy":
                    {
                        if (nArgs["type"] != "admin-access-s3")
                            throw new NotSupportedException("Only 'admin-access-s3' type is currently supported.");

                        if (!nArgs.ContainsKey("paths"))
                            throw new NotSupportedException("policies parameter was not specified");

                        var paths = nArgs["paths"].Split(',').Where(x => !x.IsNullOrWhitespace()).ToArray();

                        if (paths.IsNullOrEmpty())
                            throw new Exception("At least one path must be specified in the paths parameter.");

                        var result = helper.CreateAdminAccessPolicyS3Async(
                            name: nArgs["name"],
                            paths: paths,
                            description: nArgs.FirstOrDefault(x => x.Key == "description").Value ?? $"Admin S3 Access Policy to '{nArgs["paths"].JsonSerialize()}' auto generated by AWSHelper").Result;

                        Console.WriteLine($"SUCCESS, {nArgs["name"]} policy was created for path {nArgs["paths"].JsonSerialize()}, Arn: {result.Policy.Arn}.");
                    }
                    ; break;
                case "delete-policy":
                    {
                        var result = helper.DeletePolicyByNameAsync(
                            name: nArgs["name"]).Result;

                        Console.WriteLine($"SUCCESS, {nArgs["name"]} policy was removed.");
                    }
                    ; break;
                case "create-role":
                    {
                        if (!nArgs.ContainsKey("policies"))
                            throw new NotSupportedException("policies parameter was not specified");

                        var policies = nArgs["policies"].Split(',').Where(x => !x.IsNullOrWhitespace()).ToArray();

                        if (policies.IsNullOrEmpty())
                            throw new Exception($"No policies were found although flag was present, {nArgs["policies"]}, verify that names are separated by ','");

                        var result = helper.CreateRoleWithPoliciesAsync(
                            roleName: nArgs["name"],
                            policies: policies,
                            roleDescription: nArgs.FirstOrDefault(x => x.Key == "description").Value ?? $"Role '{nArgs["name"]}' auto generated by AWSHelper").Result;

                        Console.WriteLine($"SUCCESS, {nArgs["name"]} role was created, Arn: {result.roleResponse.Role.Arn}, Policies: {policies.JsonSerialize()}.");
                    }
                    ; break;
                case "delete-role":
                    {
                        var result = helper.DeleteRoleAsync(
                            roleName: nArgs["name"], detachPolicies: true).Result;

                        Console.WriteLine($"SUCCESS, {nArgs["name"]} role was removed and all policies detatched.");
                    }
                    ; break;
                case "help": HelpPrinter($"{args[0]}", "Amazon Identity and Access Management",
                    ("create-policy", "Accepts params: type ('admin-access-s3'), name, paths (',' separated), description (optional)"),
                    ("create-role", "Accepts params: name, policies (',' separated), description (optional)"),
                    ("delete-policy", "Accepts params: name"),
                    ("delete-role", "Accepts params: name"));
                    break;
                default:
                    {
                        Console.WriteLine($"Try '{args[0]} help' to find out list of available commands.");
                        throw new Exception($"Unknown IAM command: '{args[0]} {args[1]}'");
                    }
            }
        }
    }
}
